name: Terraform Steps

on:
  workflow_call:
    inputs:
      action:
        description: 'Terraform Action to Execute'
        required: true
        type: string
      environment:
        description: 'Environment (dev/prod)'
        required: true
        type: string
      aws_region:
        description: 'AWS Region'
        required: false
        type: string
        default: 'ap-south-1'
      terraform_dir:
        description: 'Terraform Directory'
        required: false
        type: string
        default: '.'
      aws_role_arn:
        description: 'AWS Role ARN to assume'
        required: true
        type: string
    secrets:
      GITHUB_TOKEN:
        required: true

jobs:
  terraform:
    name: Terraform ${{ inputs.action }} - ${{ inputs.environment }}
    runs-on: self-hosted

    permissions:
      contents: read
      id-token: write
      pull-requests: write

    env:
      TERRAFORM_DIR: ${{ github.workspace }}/${{ inputs.terraform_dir }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          fetch-depth: 0

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws_role_arn }}
          aws-region: ${{ inputs.aws_region }}

      - id: init
        name: Run terraform init
        run: terraform init
        working-directory: ${{ env.TERRAFORM_DIR }}

      - id: validate
        name: Run terraform validate
        run: terraform validate
        working-directory: ${{ env.TERRAFORM_DIR }}

      - id: plan
        name: Run terraform plan
        if: ${{ inputs.action == 'plan' }}
        run: |
          set +e;
          terraform plan -input=false -out=tfplan -detailed-exitcode;
          PLAN_EXITCODE=$?;
          echo "exitcode=$PLAN_EXITCODE" | tee -a $GITHUB_OUTPUT;

          terraform show -no-color tfplan > plan_output.txt

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PLAN_COMMENT=$(cat plan_output.txt | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
            curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            -d "{\"body\": \"**Terraform Plan Output (${{ inputs.environment }}):**\n\n\`\`\`\n$PLAN_COMMENT\n\`\`\`\"}"
          fi

          if [[ $PLAN_EXITCODE == 2 ]];
          then
            exit 0;
          else
            exit $PLAN_EXITCODE;
          fi
        working-directory: ${{ env.TERRAFORM_DIR }}

      - id: apply
        name: Run terraform apply
        if: ${{ inputs.action == 'apply' }}
        run: |
          terraform plan -input=false -out=tfplan
          terraform apply -auto-approve -input=false tfplan;
        working-directory: ${{ env.TERRAFORM_DIR }}

      - id: destroy
        name: Run terraform destroy
        if: ${{ inputs.action == 'destroy' }}
        run: |
          terraform destroy -auto-approve -input=false;
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Clean up plan file
        if: ${{ (inputs.action == 'apply' || inputs.action == 'destroy') && success() }}
        run: rm -f tfplan
        working-directory: ${{ env.TERRAFORM_DIR }}
